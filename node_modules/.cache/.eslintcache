[{"F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\index.tsx":"1","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\App.tsx":"2","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\SnackBarStoreContext.jsx":"3","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\BunkerManager.jsx":"4","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\GameManager.jsx":"5","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\Home.jsx":"6","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\GameSettings.jsx":"7","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\PageNotFound.jsx":"8","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\SnackBar.jsx":"9","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\CreateBunker.jsx":"10","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\BunkerChoice.jsx":"11","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\SnackBarReducer.jsx":"12","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\TestBunkerLogic.jsx":"13","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\ItemManagement.jsx":"14"},{"size":389,"mtime":1676601135048,"results":"15","hashOfConfig":"16"},{"size":1188,"mtime":1684291352485,"results":"17","hashOfConfig":"16"},{"size":508,"mtime":1676605034548,"results":"18","hashOfConfig":"16"},{"size":6576,"mtime":1678939180653,"results":"19","hashOfConfig":"16"},{"size":1136,"mtime":1674360407665,"results":"20","hashOfConfig":"16"},{"size":952,"mtime":1684987659912,"results":"21","hashOfConfig":"16"},{"size":1317,"mtime":1684292192238,"results":"22","hashOfConfig":"16"},{"size":125,"mtime":1674617455664,"results":"23","hashOfConfig":"16"},{"size":1101,"mtime":1678938904384,"results":"24","hashOfConfig":"16"},{"size":10624,"mtime":1679024060391,"results":"25","hashOfConfig":"16"},{"size":2315,"mtime":1684291304520,"results":"26","hashOfConfig":"16"},{"size":648,"mtime":1678938757496,"results":"27","hashOfConfig":"16"},{"size":4186,"mtime":1679022076131,"results":"28","hashOfConfig":"16"},{"size":17209,"mtime":1679025304522,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"101kp3z",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"41"},"F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\index.tsx",[],[],[],"F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\App.tsx",["83"],[],"import React, { useState } from 'react';\nimport './App.css';\nimport GameManager from \"./GameManager\"\nimport BunkerManager from \"./BunkerManager\"\nimport GameSettings from \"./GameSettings\"\nimport Home from \"./Home\"\nimport PageNotFound from './PageNotFound';\nimport { Routes, Route } from \"react-router\";\nimport CreateBunker from './CreateBunker';\nimport SnackBarMessage from './SnackBar';\nimport BunkerChoice from './BunkerChoice';\n\n\nfunction App() {\n  return (\n    <div>\n      <SnackBarMessage />\n      <Routes>\n        <Route path={\"/\"} element={<Home />} />\n        <Route path={\"/game\"} element={<GameSettings />} />\n        <Route path={\"/game/:name\"} element={<GameManager />} />\n        <Route path={\"/bunkerchoice\"} element={<BunkerChoice />} />\n        <Route path={\"/gameSettings/:name\"} element={<GameSettings />} />\n        <Route path={\"/manage\"} element={<BunkerManager />} />\n        <Route path={\"/manage/create\"} element={<CreateBunker isCreatingBunker={true} />} />\n        <Route path={\"/manage/edit/:name\"} element={<CreateBunker isCreatingBunker={false} />} />\n        <Route path=\"*\" element={<PageNotFound />} />\n      </Routes>\n    </div>\n  )\n}\n\nexport default App;\n","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\SnackBarStoreContext.jsx",[],[],[],"F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\BunkerManager.jsx",["84","85","86","87","88","89","90","91","92","93"],[],"import React, { useState, useEffect, useContext } from 'react';\r\nimport App from './App';\r\nimport './App.css';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Button from '@mui/material/Button';\r\nimport Card from '@mui/material/Card';\r\nimport { CardContent, CardActions, Typography, Dialog } from '@mui/material';\r\nimport { Context } from './SnackBarStoreContext';\r\nimport { DialogTitle, DialogContent, DialogContentText } from '@mui/material';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\nconst BunkerManager = () => {\r\n    const [loadFile, setLoad] = useState(false)\r\n    const [createBunker, setCreate] = useState(false)\r\n    const [editBunker, setEdit] = useState(false)\r\n    const [bunkerList, setBunkerList] = useState([])\r\n    const [file, setFile] = useState(null);\r\n    const [isValid, setIsValid] = useState(null);\r\n    const [state, dispatch] = useContext(Context);\r\n    const [openWindow, setOpenWindow] = useState(false)\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        console.log(\"Loading bunkers from local storage\")\r\n        BunkerLoadFromLocal()\r\n    }, []);\r\n    function BunkerLoadFromLocal() {\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            const key = localStorage.key(i);\r\n            console.log(\"Key: \" + key)\r\n            if (key.startsWith(\"bunker-\")) {\r\n                const bunkerName = key.substring('bunker-'.length);\r\n                const dataString = localStorage.getItem(key);\r\n                const data = JSON.parse(dataString);\r\n                setBunkerList(bunkerList => bunkerList.concat(data))\r\n            }\r\n        }\r\n        console.log(\"Bunker list: \" + bunkerList)\r\n    }\r\n\r\n\r\n    const handleFileChange = (event) => {\r\n        const selectedFile = event.target.files[0];\r\n        setFile(selectedFile);\r\n        validateFile(selectedFile);\r\n    };\r\n\r\n    const validateFile = (file) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                const text = (e.target.result);\r\n                const data = JSON.parse(text);\r\n                if (data.name && data.rooms && data.description) {\r\n                    setIsValid(true);\r\n                    localStorage.setItem(\"bunker-\" + data.name, text);\r\n                    dispatch({ type: \"OPEN\", severity: \"success\", message: \"Bunker loaded           \", button: <Button sx={{color: 'text.disabled'}} onClick={() => { navigate(\"/manage/edit/\" + data.name) }}>Edit</Button> });\r\n                    setBunkerList(bunkerList => bunkerList.concat(data))\r\n                } else {\r\n                    setIsValid(false);\r\n                }\r\n                \r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n        catch (err) {\r\n            setIsValid(false);\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpenWindow(false)\r\n    };\r\n\r\n    const handleBunkerDelete = () => {\r\n        setOpenWindow(true)\r\n    };\r\n\r\n    function handleRemoveBunker(index) {\r\n        const newBunkers = [...bunkerList]\r\n        localStorage.removeItem(\"bunker-\" + bunkerList[index].name)\r\n        newBunkers.splice(index, 1)\r\n        setBunkerList(newBunkers)\r\n        console.log(JSON.stringify(localStorage))\r\n        handleClose()\r\n        dispatch({ type: \"OPEN\", severity: \"success\", message: \"Bunker deleted\" });\r\n    }\r\n\r\n    const handleBunkerExport = (bunker) => {\r\n        const fileName = bunker.name + \"-bunker.json\";\r\n        const fileData = JSON.stringify(bunker);\r\n        const fileToSave = new Blob([fileData], { type: \"application/json\" });\r\n        saveAs(fileToSave, fileName);\r\n        dispatch({ type: \"OPEN\", severity: \"success\", message: \"Bunker exported\" });\r\n    };\r\n\r\n    function BunkerCard(bunker, index) {\r\n        return (\r\n            <Card sx={{ minWidth: 275 }}>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {bunker.name}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                        Room Count: {bunker.rooms.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                        Description: {bunker.description}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button size=\"small\" variant=\"outlined\" onClick={() => { handleBunkerExport(bunker) }}>Export</Button>\r\n                    <Link to={`/manage/edit/${bunker.name}`}>\r\n                        <Button size=\"small\" variant=\"outlined\" onClick={() => { setEdit(true) }}>Edit</Button>\r\n                    </Link>\r\n                    <Button size=\"small\" variant=\"outlined\" onClick={() => { handleBunkerDelete() }}>Delete</Button>\r\n                    <Dialog open={openWindow} onClose={handleClose} aria-labelledby=\"deleteBunker\">\r\n                        <DialogTitle id=\"deleteBunker\">Are you sure?</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                This will delete the bunker and all of its rooms.\r\n                            </DialogContentText>\r\n                            <Button onClick={handleClose}>Cancel</Button>\r\n                            <Button onClick={() => { handleRemoveBunker(index) }}>Delete</Button>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Bunker Manager</h1>\r\n            <label htmlFor='fileInput'>\r\n                <Button variant='contained' onClick={() => { document.getElementById(\"fileInput\").click() }} >\r\n                    Load Bunker\r\n                </Button>\r\n            </label>\r\n            <input id='fileInput' type='file' accept=\"application/json, text/plain\" style={{ display: 'none' }} onChange={handleFileChange} />\r\n            <Link to=\"/manage/create\">\r\n                <Button variant=\"contained\" onClick={() => { setCreate(true) }}>\r\n                    Create Bunker\r\n                </Button>\r\n            </Link>\r\n            <Link to=\"/\">\r\n                <Button variant='contained'>\r\n                    Back\r\n                </Button>\r\n            </Link> \r\n\r\n            {bunkerList.map((bunker, index) => (\r\n                <div key={index}>\r\n                    {BunkerCard(bunker, index)}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BunkerManager;","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\GameManager.jsx",["94","95","96","97"],[],"\r\nimport React, {useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport data from './Test.json'\r\n\r\nconst GameManager = () => {\r\n  const [roomName, setRoomName] = useState(\"Entrance\")\r\n  const [command, setCommand] = useState(\"\")\r\n  const [outputs, setOutputs] = useState([])\r\n\r\n  function addOutput(output) {\r\n    setOutputs([...outputs, output])\r\n  }\r\n\r\n  function doCommand() {\r\n    const room = data[roomName]\r\n    // Check for valid command\r\n    if (room[command] && room[command] != \"NA\" && room[command] != \"N\") {\r\n      console.log(\"valid command\")\r\n      // Check movements\r\n      if ([\"East\", \"West\", \"North\", \"South\"].includes(command)) {\r\n        addOutput(`Heading ${command}`)\r\n        setRoomName(room[command])\r\n        setCommand(\"\")\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>{roomName}</p>\r\n      {\r\n        outputs.map((output)=>{\r\n          <p>\r\n            {output}\r\n          </p>\r\n        })\r\n      }\r\n      <input value={command} onChange={(e) => setCommand(e.target.value)} />\r\n      <button onClick={()=>{doCommand()}}>Submit</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameManager;\r\n","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\Home.jsx",[],[],"F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\GameSettings.jsx",["98","99","100","101","102","103","104","105","106","107","108","109"],[],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { Button } from '@mui/material';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText } from '@mui/material';\r\nimport { Context } from './SnackBarStoreContext';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\n\r\nfunction GameSettings(props) {\r\n    const [state, dispatch] = useContext(Context);\r\n    const [openBunkerList, setOpenBunkerList] = useState(false);\r\n    const { name } = useParams();\r\n    const getBunker = JSON.parse(localStorage.getItem(\"bunker-\" + name));\r\n\r\n    const [bunkerList, setBunkerList] = useState([]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Link to=\"/\">\r\n                    <Button variant='contained'>Home</Button>\r\n                </Link>\r\n                <Link to=\"/bunkerChoice\">\r\n                    <Button variant='contained'>Choose Bunker</Button>\r\n                </Link>\r\n            </div>\r\n            <div>\r\n                <h2>Current bunker: {name}</h2>\r\n            </div>\r\n            <div>\r\n                <Link to={`/game/${name}`}>\r\n                    <Button variant='contained'>Play</Button>\r\n                </Link>\r\n                {/*create save management for game*/}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameSettings;\r\n","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\PageNotFound.jsx",[],[],"F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\SnackBar.jsx",["110"],[],"import React, { useState, useContext} from 'react';\r\nimport './App.css';\r\nimport { Snackbar, Alert} from '@mui/material';\r\nimport { Context } from './SnackBarStoreContext';\r\n\r\nconst SnackBarMessage = () => {\r\n    const [state, dispatch] = useContext(Context);\r\n    const [open, setOpen] = useState(true);\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === \"clickaway\") return;\r\n        setOpen(false);\r\n        dispatch({ type: \"CLOSE\" });\r\n    };\r\n\r\n    return (\r\n        <div style={{}}>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"left\",\r\n                }} \r\n            open = {state.open}\r\n            autoHideDuration = {6000}\r\n            onClose = {handleClose}>\r\n                <Alert variant=\"filled\" onClose={handleClose} severity={state.severity} sx={{ width: \"100%\" }}>\r\n                    {state.message}\r\n                    {state.button ? state.button : null}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\nexport default SnackBarMessage;\r\n","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\CreateBunker.jsx",["111","112","113","114","115"],[],"import { TextField, Box, Card, Button, CardContent, Typography, FormControl, DialogActions, ListItemText } from '@mui/material';\r\nimport { useState, useContext } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText } from '@mui/material';\r\nimport { InputLabel, MenuItem, Select, FormControlLabel, Checkbox } from '@mui/material';\r\nimport { Context } from './SnackBarStoreContext';\r\nimport TestBunkerLogic from './TestBunkerLogic';\r\nimport ItemManagement from './ItemManagement';\r\n\r\nfunction CreateBunker(props) {\r\n    const [state, dispatch] = useContext(Context);\r\n    const [bunkerInfoOpen, setBunkerInfoOpen] = useState(false);\r\n    const { name } = useParams();\r\n    const getBunker = JSON.parse(localStorage.getItem(\"bunker-\" + name));\r\n\r\n    const [bunkerName, setNewBunkerName] = useState(getBunker ? getBunker.name : \"\");\r\n    const [bunkerDescription, setNewBunkerDescription] = useState(getBunker ? getBunker.description : \"\");\r\n\r\n    const [bunkerRooms, setRooms] = useState(getBunker ? getBunker.rooms : []);\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [newNorth, setNewNorth] = useState(\"\");\r\n    const [newSouth, setNewSouth] = useState(\"\");\r\n    const [newEast, setNewEast] = useState(\"\");\r\n    const [newWest, setNewWest] = useState(\"\");\r\n    const [newRoomDescription, setNewRoomDescription] = useState(\"\");\r\n    const [newRoomItem, setNewRoomItem] = useState(\"None\");\r\n\r\n    const [bunkerItems, setItems] = useState(getBunker ? getBunker.items : []);\r\n\r\n\r\n\r\n\r\n    //Adds a room to the bunkerRooms array\r\n    function handleAddRoom(e) {\r\n        e.preventDefault();\r\n        if (newName === \"\" || newRoomDescription === \"\") {\r\n            dispatch({ type: \"OPEN\", severity: \"error\", message: \"Room name and description cannot be empty\" });\r\n            return;\r\n        }\r\n        if (newNorth === \"\" && newSouth === \"\" && newEast === \"\" && newWest === \"\") {\r\n            dispatch({ type: \"OPEN\", severity: \"error\", message: \"Room must have at least one exit\" });\r\n            return;\r\n        }\r\n        const newRoom = {\r\n            name: newName,\r\n            north: newNorth,\r\n            south: newSouth,\r\n            east: newEast,\r\n            west: newWest,\r\n            description: newRoomDescription,\r\n            item: newRoomItem\r\n        };\r\n\r\n        setRooms([...bunkerRooms, newRoom]);\r\n        setNewName(\"\");\r\n        setNewNorth(\"\");\r\n        setNewSouth(\"\");\r\n        setNewEast(\"\");\r\n        setNewWest(\"\");\r\n        setNewRoomDescription(\"\");\r\n        setNewRoomItem(\"\");\r\n    }\r\n\r\n    //Deletes a room from the bunkerRooms array\r\n    function handleRemoveRoom(index) {\r\n        const newRooms = [...bunkerRooms];\r\n        newRooms.splice(index, 1);\r\n        setRooms(newRooms);\r\n    }\r\n\r\n    //Misc handle functions for the dialog boxes\r\n    const handleBunkerInfoOpen = () => {\r\n        setBunkerInfoOpen(true);\r\n    };\r\n\r\n    const handleBunkerInfoClose = () => {\r\n        setBunkerInfoOpen(false);\r\n    };\r\n\r\n\r\n\r\n\r\n    //Builds the JSON object for the bunker\r\n    function BuildBunker() {\r\n        const bunker = {\r\n            name: bunkerName,\r\n            description: bunkerDescription,\r\n            items: bunkerItems,\r\n            rooms: bunkerRooms\r\n        };\r\n\r\n        return bunker;\r\n    }\r\n\r\n    //Saves the bunker to local storage\r\n    function handleBunkerSave() {\r\n        console.log(\"Trying to save bunker to local storage\")\r\n        if (bunkerName === \"\") {\r\n            dispatch({ type: \"OPEN\", severity: \"error\", message: \"Bunker name cannot be empty\" });\r\n            return;\r\n        }\r\n        if (bunkerRooms.length < 3) {\r\n            dispatch({ type: \"OPEN\", severity: \"error\", message: \"Bunker must have at least 2 rooms\" });\r\n            return;\r\n        }\r\n        console.log(bunkerRooms)\r\n        localStorage.setItem(\"bunker-\" + bunkerName, JSON.stringify(BuildBunker()));\r\n        dispatch({ type: \"OPEN\", severity: \"success\", message: \"Bunker saved\" });\r\n    }\r\n\r\n    //Handles the logic for editing a room\r\n    function handleEditRoom(index) {\r\n        console.log(\"Wanting to edit room \" + index + \" \" + bunkerRooms[index].name)\r\n\r\n        if (newName === \"\") {\r\n            const newRooms = [...bunkerRooms];\r\n            const newRoom = newRooms[index];\r\n            setNewName(newRoom.name);\r\n            setNewNorth(newRoom.north);\r\n            setNewSouth(newRoom.south);\r\n            setNewEast(newRoom.east);\r\n            setNewWest(newRoom.west);\r\n            setNewRoomDescription(newRoom.description);\r\n            setNewRoomItem(newRoom.item);\r\n            handleRemoveRoom(index);\r\n        }\r\n    }\r\n\r\n    //Renders the basic bunker info near the top of the page\r\n    const getBasicBunkerInfo = () => {\r\n        return (\r\n            <div>\r\n                <Box component=\"form\" sx={{ '& > :not(style)': { m: 1, width: '25ch' }, }} noValidate autoComplete=\"off\">\r\n                    <h2>Basic Bunker Info</h2>\r\n                    <h4>Rooms: {bunkerRooms.length}</h4>\r\n                    <TextField required margin=\"normal\" id=\"outlined-basic\" label=\"Bunker Name\" variant=\"outlined\" value={bunkerName} onChange={(e) => setNewBunkerName(e.target.value)} />\r\n                    <TextField margin=\"normal\" id=\"outlined-basic\" label=\"Bunker Description\" variant=\"outlined\" value={bunkerDescription} onChange={(e) => setNewBunkerDescription(e.target.value)} />\r\n                </Box>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //Runs a few logic checks to make sure the bunker is valid. Not 100% foolproof, but should catch most errors\r\n    const handleTestBunker = () => {\r\n        console.log(\"Trying to test bunker\")\r\n        dispatch(TestBunkerLogic(BuildBunker()));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>{getBunker ? \"Edit Bunker\" : \"Create Bunker\"}</h1>\r\n            <Link to=\"/manage\"><Button variant=\"contained\">Back</Button></Link>\r\n            <Button variant=\"contained\" onClick={handleBunkerSave}>Save Bunker</Button>\r\n            <Button variant=\"contained\" onClick={handleBunkerInfoOpen}>Bunker Info</Button>\r\n            <Button variant=\"contained\" onClick={handleTestBunker}>Test Bunker</Button>\r\n            \r\n            <ItemManagement setItems={setItems} bunkerItems={bunkerItems}/>\r\n\r\n            {/*Contains the dialog box for bunker information/requirements*/}\r\n            <Dialog open={bunkerInfoOpen} onClose={handleBunkerInfoClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Bunker Info</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        This is a placeholder for bunker info.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n\r\n            {getBasicBunkerInfo()}\r\n\r\n            {/*Contains the input fields for creating a room*/}\r\n            <h2>Rooms</h2>\r\n            <Box component=\"form\" sx={{ '& > :not(style)': { m: 1, width: '25ch' }, }} noValidate autoComplete=\"off\">\r\n                <TextField required size=\"small\" margin=\"dense\" id=\"outlined-basic\" label=\"Room Name\" variant=\"outlined\" value={newName} onChange={(e) => setNewName(e.target.value)} />\r\n                <TextField size=\"small\" margin=\"dense\" id=\"outlined-basic\" label=\"Description\" variant=\"outlined\" value={newRoomDescription} onChange={(e) => setNewRoomDescription(e.target.value)} />\r\n                <TextField size=\"small\" margin=\"dense\" id=\"outlined-basic\" label=\"North Room\" variant=\"outlined\" value={newNorth} onChange={(e) => setNewNorth(e.target.value)} />\r\n                <TextField size=\"small\" margin=\"dense\" id=\"outlined-basic\" label=\"South Room\" variant=\"outlined\" value={newSouth} onChange={(e) => setNewSouth(e.target.value)} />\r\n                <TextField size=\"small\" margin=\"dense\" id=\"outlined-basic\" label=\"East Room\" variant=\"outlined\" value={newEast} onChange={(e) => setNewEast(e.target.value)} />\r\n                <TextField size=\"small\" margin=\"dense\" id=\"outlined-basic\" label=\"West Room\" variant=\"outlined\" value={newWest} onChange={(e) => setNewWest(e.target.value)} />\r\n                <FormControl>\r\n                    <InputLabel id=\"RoomItemLabel\">Item</InputLabel>\r\n                    <Select\r\n                        labelId=\"RoomItemLabel\"\r\n                        id=\"select\"\r\n                        value={newRoomItem}\r\n                        label=\"Room Item\"\r\n                        onChange={(e) => setNewRoomItem(e.target.value)}>\r\n                        <MenuItem value={\"None\"}>None</MenuItem>\r\n                        {Object.entries(bunkerItems).map(([key, value]) => (\r\n                            <MenuItem key={key} value={value.name}>{value.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <Button variant=\"contained\" onClick={handleAddRoom}>Add Room</Button>\r\n            </Box>\r\n\r\n            {/*Renders the rooms in a card format under room creation*/}\r\n            {bunkerRooms.map((room, index) => (\r\n                <Card sx={{ minWidth: 275 }} key={index}>\r\n                    <CardContent>\r\n                        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                            Room {index + 1}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"div\">\r\n                            {room.name}\r\n                        </Typography>\r\n                        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n                            Item: {room.item}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            North: {room.north}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            South: {room.south}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            East: {room.east}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            West: {room.west}\r\n                        </Typography>\r\n                        <Button variant=\"contained\" onClick={() => handleRemoveRoom(index)}>Remove Room</Button>\r\n                        <Button variant=\"contained\" onClick={() => handleEditRoom(index)}>Edit Room</Button>\r\n                    </CardContent>\r\n                </Card>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CreateBunker;","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\BunkerChoice.jsx",["116","117","118"],[],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Card } from \"@mui/material\";\r\nimport { CardContent } from \"@mui/material\";\r\nimport { CardActions } from \"@mui/material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport GameSettings from \"./GameSettings\";\r\n\r\n\r\nconst BunkerChoice = () => {\r\n\r\n    const [bunkerList, setBunkerList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"Loading bunkers from local storage\")\r\n        BunkerLoadFromLocal()\r\n    }, []);\r\n\r\n    function BunkerLoadFromLocal() {\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            const key = localStorage.key(i);\r\n            console.log(\"Key: \" + key)\r\n            if (key.startsWith(\"bunker-\")) {\r\n                const bunkerName = key.substring('bunker-'.length);\r\n                const dataString = localStorage.getItem(key);\r\n                const data = JSON.parse(dataString);\r\n                setBunkerList(bunkerList => bunkerList.concat(data))\r\n            }\r\n        }\r\n        console.log(\"Bunker list: \" + bunkerList)\r\n    }\r\n\r\n    function BunkerCard(bunker, index) {\r\n        return (\r\n            <Card sx={{ minWidth: 275 }}>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {bunker.name}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                        Room Count: {bunker.rooms.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                        Description: {bunker.description}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Link to={`/gameSettings/${bunker.name}`}>\r\n                        <Button size=\"small\" variant=\"outlined\">Choose</Button>\r\n                    </Link>\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n\r\nreturn (\r\n    <div>\r\n        <Link to=\"/game\">\r\n            <Button variant='contained'>Back</Button>\r\n        </Link>\r\n        {bunkerList.map((bunker, index) => (\r\n            <div key={index}>\r\n                {BunkerCard(bunker, index)}\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\n}\r\nexport default BunkerChoice;","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\SnackBarReducer.jsx",["119","120"],[],"import React, {userReducer} from 'react';\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"OPEN\":\r\n            return {\r\n                ...state,\r\n                severity: action.severity,\r\n                message: action.message,\r\n                open: true,\r\n                button: action.button\r\n            };\r\n        case \"CLOSE\":\r\n            return {\r\n                ...state,\r\n                severity: \"success\",\r\n                message: \"\",\r\n                open: false,\r\n                button: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\TestBunkerLogic.jsx",[],[],"F:\\VSCode\\React\\ReactBunkerProject\\bunker-project\\src\\ItemManagement.jsx",["121"],[],"import { React } from 'react';\r\nimport { useState, useContext } from 'react';\r\nimport { Box, ListItemButton } from '@mui/material';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, FormControlLabel, Checkbox, FormControl, InputLabel, Select, MenuItem, List, ListItemText, Collapse } from '@mui/material';\r\nimport { Context } from './SnackBarStoreContext';\r\nimport { ExpandLess, ExpandMore } from '@mui/icons-material';\r\n\r\nfunction ItemManagement({ bunkerItems, setItems }) {\r\n    const [state, dispatch] = useContext(Context);\r\n\r\n    const [itemInfoOpen, setItemInfoDialogOpen] = useState(false);\r\n    const [itemCreationOpen, setOpenWindow] = useState(false);\r\n    const [itemName, setItemName] = useState(\"\");\r\n    const [itemDescription, setItemDescription] = useState(\"\");\r\n    const [itemRequired, setItemRequired] = useState(\"\");\r\n    const [itemPickups, setItemPickups] = useState(\"\");\r\n    const [alreadyPickedUp, setAlreadyPickedUp] = useState(\"\");\r\n    const [bacon, setBacon] = useState(false);\r\n    const [itemNeeded, setItemNeeded] = useState(\"\");\r\n    const [itemPickupDescription, setItemPickupDescription] = useState(\"\");\r\n    const [itemIncludeDefaults, setItemIncludePickups] = useState(true);\r\n    const [itemListOpen, setItemListOpen] = useState(false);\r\n    const [itemListExpanded, setItemListExpanded] = useState(false);\r\n    const [itemSecondaryDelete, setItemSecondaryDelete] = useState(false);\r\n    const [itemIncludeNameInPickups, setItemIncludeNameInPickups] = useState(true);\r\n\r\n\r\n    //Adds an item to the bunkerItems array\r\n    function handleAddItem(e) {\r\n        e.preventDefault();\r\n        if (itemName === \"\" || itemDescription === \"\") {\r\n            dispatch({ type: \"OPEN\", severity: \"error\", message: \"Item name and description cannot be empty\" });\r\n            return;\r\n        }\r\n        const newItem = {\r\n            name: itemName,\r\n            description: itemDescription,\r\n            required: itemRequired,\r\n            pickups: itemPickups,\r\n            defaultPickups: itemIncludeDefaults,\r\n            descAlreadyHave: alreadyPickedUp,\r\n            descItemNeeded: itemNeeded,\r\n            descItemPickup: itemPickupDescription,\r\n            baconItem: bacon,\r\n        };\r\n\r\n        setItems([...bunkerItems, newItem]);\r\n        setItemName(\"\");\r\n        setItemDescription(\"\");\r\n        console.log(\"Item added\" + newItem.name + \" \" + newItem.description + \" \" + newItem.required);\r\n        dispatch({ type: \"OPEN\", severity: \"success\", message: \"Item added\" });\r\n        handleCloseItem();\r\n    }\r\n\r\n    //Removes an item from the bunkerItems array\r\n    function handleDeleteItem(index) {\r\n        const newItems = [...bunkerItems];\r\n        newItems.splice(index, 1);\r\n        setItems(newItems);\r\n    }\r\n\r\n    //Handles the logic for including default pickups\r\n    const handleItemPickupListDefault = () => {\r\n        console.log(\"Changing default pickups\")\r\n        if (itemIncludeDefaults) {\r\n            console.log(\"Changing to false\")\r\n            if (itemPickups === \"\") {\r\n                dispatch({ type: \"OPEN\", severity: \"error\", message: \"Cannot change default pickups when there are no custom pickups\" });\r\n                setItemIncludePickups(true);\r\n            }\r\n            else\r\n                setItemIncludePickups(false);\r\n        }\r\n        else\r\n            setItemIncludePickups(true);\r\n\r\n    };\r\n\r\n    //Misc handle functions for the dialog boxes\r\n    const handleItemOpen = () => {\r\n        setOpenWindow(true);\r\n    };\r\n\r\n    const handleCloseItem = () => {\r\n        setOpenWindow(false);\r\n    };\r\n\r\n    const handleItemInfoOpen = () => {\r\n        setItemInfoDialogOpen(true);\r\n    };\r\n\r\n    const handleItemInfoClose = () => {\r\n        setItemInfoDialogOpen(false);\r\n    };\r\n\r\n    const handleItemListOpen = () => {\r\n        setItemListOpen(true);\r\n    };\r\n\r\n    const handleItemListClose = () => {\r\n        setItemListOpen(false);\r\n    };\r\n\r\n    const handleItemListExpand = () => {\r\n        setItemListExpanded(!itemListExpanded);\r\n    };\r\n\r\n    const handleItemSecondaryDeleteOpen = () => {\r\n        setItemSecondaryDelete(true);\r\n    };\r\n\r\n    const handleItemSecondaryDeleteClose = () => {\r\n        setItemSecondaryDelete(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" onClick={handleItemOpen}>Create Item</Button>\r\n            <Button variant=\"contained\" onClick={handleItemListOpen}>Item List</Button>\r\n\r\n            {/*Contains the dialog box for item creation*/}\r\n            <Dialog open={itemCreationOpen} onClose={handleCloseItem} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Create Item</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Create a new item for your bunker.\r\n                    </DialogContentText>\r\n                    <form>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            key=\"name\"\r\n                            label=\"Name\"\r\n                            required\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            value={itemName}\r\n                            onChange={(e) => setItemName(e.target.value)}\r\n                        />\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"description\"\r\n                            key=\"description\"\r\n                            label=\"Description\"\r\n                            required\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            value={itemDescription}\r\n                            onChange={(e) => setItemDescription(e.target.value)}\r\n                        />\r\n\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"itemPickupsList\"\r\n                            key=\"itemPickupsList\"\r\n                            label=\"Pickup Word List - Seperate with commas\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            value={itemPickups}\r\n                            onChange={(e) => setItemPickups(e.target.value)}\r\n                        />\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={itemIncludeDefaults}\r\n                                        onChange={() => handleItemPickupListDefault()}\r\n                                        name=\"checkedB\"\r\n                                        color=\"primary\"\r\n                                        key=\"itemIncludeDefaults\"\r\n                                    />\r\n                                }\r\n                                label=\"Include Default Pickups\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={itemIncludeNameInPickups}\r\n                                        onChange={() => setItemIncludeNameInPickups(!itemIncludeNameInPickups)}\r\n                                        name=\"checkedC\"\r\n                                        color=\"primary\"\r\n                                        key=\"itemIncludeNameInPickups\"\r\n                                    />\r\n                                }\r\n                                label=\"Include Item Name in Pickups\"\r\n                            />\r\n                        </div>\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"itemPickedUp\"\r\n                            key=\"itemPickedUp\"\r\n                            label=\"Picked Up Description\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            value={itemPickupDescription}\r\n                            onChange={(e) => setItemPickupDescription(e.target.value)}\r\n                        />\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"alreadyPickedUp\"\r\n                            key=\"alreadyPickedUp\"\r\n                            label=\"Already Picked Up Description\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            value={alreadyPickedUp}\r\n                            onChange={(e) => setAlreadyPickedUp(e.target.value)}\r\n                        />\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"itemNeeded\"\r\n                            key=\"itemNeeded\"\r\n                            label=\"Item Needed Description\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            value={itemNeeded}\r\n                            onChange={(e) => setItemNeeded(e.target.value)}\r\n                        />\r\n                        <FormControl fullWidth>\r\n                            <InputLabel id=\"select-label\">Item Needed to Pickup</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-label\"\r\n                                id=\"select\"\r\n                                key=\"select\"\r\n                                value={itemRequired}\r\n                                label=\"Required Item\"\r\n                                onChange={(e) => setItemRequired(e.target.value.name)}\r\n                            >\r\n                                {Object.entries(bunkerItems).map(([key, value]) => (\r\n\r\n                                    <MenuItem key={key} value={value.name}>{value.name}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={bacon}\r\n                                    onChange={(e) => setBacon(e.target.checked)}\r\n                                    name=\"bacon\"\r\n                                    color=\"primary\"\r\n                                    key=\"bacon\"\r\n                                />\r\n                            }\r\n                            label=\"Bacon Item\"\r\n                        />\r\n                        <DialogActions>\r\n                            <Button onClick={handleItemInfoOpen}>Item Info</Button>\r\n                            <Button onClick={handleCloseItem}>Cancel</Button>\r\n                            <Button onClick={handleAddItem} type=\"submit\">Submit</Button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {/*Contains the dialog box for item information/requirements*/}\r\n            <Dialog open={itemInfoOpen} onClose={handleItemInfoClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Item Info</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <h3>Defaults</h3>\r\n                        <p>Pickup List, Already Picked Up, Item Needed, and Item Pick Up all have default values. If you don't put anything in, they will be set to default. Defaults\r\n                            are basic pickup words with the descriptions being the item name and the corresponding title.</p>\r\n                        <h4>Item Name</h4>\r\n                        <p>Is the name of the item</p>\r\n                        <h4>Item Description</h4>\r\n                        <p>Is a short description of the item. This will be played on entry to the room, when the item is available for pickup.</p>\r\n                        <h4>Include Default Pickups</h4>\r\n                        <p>If true, the default pickup words will be added to the pickup list. This will not matter if there is no user specified pickup words.</p>\r\n                        <h4>Item Pickup List</h4>\r\n                        <p>Is a list of words/sentences that can be used to pickup this item. Seperate each group with a comma.</p>\r\n                        <h4>Already Picked Up Description</h4>\r\n                        <p>This is a description that will be played if the player tries to pickup the item again.</p>\r\n                        <h4>Item Needed Description</h4>\r\n                        <p>This is a description that will be played if the player tries to aquire the item without having the required item that it needs.</p>\r\n                        <h4>Item Picked Up Description</h4>\r\n                        <p>This is a description that will be played when the player picks up the item.</p>\r\n                        <h4>Bacon Item</h4>\r\n                        <p>If true, the item will be required to complete the bunker. You can have none or all your items be required.</p>\r\n                        <h4>Needed to Pickup</h4>\r\n                        <p>This is the item that is required to pickup this item. If none is needed, leave blank.</p>\r\n\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {/*Contains the dialog box for the item list*/}\r\n            <Dialog open={itemListOpen} onClose={handleItemListClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Item List</DialogTitle>\r\n                <DialogContent>\r\n                    <div>\r\n                        <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }} component=\"nav\" aria-label=\"main item list\">\r\n                            {Object.entries(bunkerItems).map(([key, value]) => (\r\n                                <div key={key}>\r\n                                    <Box sx={{ display: 'flex' }}>\r\n                                        <ListItemText primary={value.name}></ListItemText>\r\n                                        <ListItemButton onClick={handleItemListExpand}>\r\n                                            {itemListExpanded ? <ExpandLess /> : <ExpandMore />}\r\n                                        </ListItemButton>\r\n                                    </Box>\r\n                                    <Collapse in={itemListExpanded} timeout=\"auto\" unmountOnExit>\r\n                                        <List component=\"div\" disablePadding>\r\n                                            <ListItemButton sx={{ pl: 4, display: 'block' }}>\r\n                                                <p><b>Description: </b>{value.description}</p>\r\n                                                <p><b>Pickup Words: </b>{value.pickups}</p>\r\n                                                <p><b>Already Picked Up Description: </b>{value.descAlreadyHave}</p>\r\n                                                <p><b>Item Needed Description: </b>{value.descItemNeeded}</p>\r\n                                                <p><b>Item Picked Up Description: </b>{value.descItemPickup}</p>\r\n                                                <p><b>Bacon Item: </b>{value.baconItem ? \"Yes\" : \"No\"}</p>\r\n                                                <p><b>Item Required: </b>{value.required}</p>\r\n                                            </ListItemButton>\r\n                                            <Button onClick={handleItemSecondaryDeleteOpen}>Delete Item</Button>\r\n                                            <Dialog open={itemSecondaryDelete} onClose={handleItemSecondaryDeleteClose} aria-labelledby=\"form-dialog-title\">\r\n                                                <DialogTitle id=\"form-dialog-title\">Delete Item</DialogTitle>\r\n                                                <DialogContent>\r\n                                                    <DialogContentText>\r\n                                                        Are you sure you want to delete this item?\r\n                                                    </DialogContentText>\r\n                                                </DialogContent>\r\n                                                <DialogActions>\r\n                                                    <Button onClick={handleItemSecondaryDeleteClose}>Cancel</Button>\r\n                                                    <Button onClick={() => handleDeleteItem(key)}>Delete</Button>\r\n                                                </DialogActions>\r\n                                            </Dialog>\r\n                                        </List>\r\n                                    </Collapse>\r\n                                </div>\r\n                            ))}\r\n                        </List>\r\n                    </div>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ItemManagement;",{"ruleId":"122","severity":1,"message":"123","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"127","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":11},{"ruleId":"126","severity":1,"message":"128","line":14,"column":12,"nodeType":"124","messageId":"125","endLine":14,"endColumn":20},{"ruleId":"126","severity":1,"message":"129","line":14,"column":22,"nodeType":"124","messageId":"125","endLine":14,"endColumn":29},{"ruleId":"126","severity":1,"message":"130","line":15,"column":12,"nodeType":"124","messageId":"125","endLine":15,"endColumn":24},{"ruleId":"126","severity":1,"message":"131","line":16,"column":12,"nodeType":"124","messageId":"125","endLine":16,"endColumn":22},{"ruleId":"126","severity":1,"message":"132","line":18,"column":12,"nodeType":"124","messageId":"125","endLine":18,"endColumn":16},{"ruleId":"126","severity":1,"message":"133","line":19,"column":12,"nodeType":"124","messageId":"125","endLine":19,"endColumn":19},{"ruleId":"126","severity":1,"message":"134","line":20,"column":12,"nodeType":"124","messageId":"125","endLine":20,"endColumn":17},{"ruleId":"135","severity":1,"message":"136","line":27,"column":8,"nodeType":"137","endLine":27,"endColumn":10,"suggestions":"138"},{"ruleId":"126","severity":1,"message":"139","line":33,"column":23,"nodeType":"124","messageId":"125","endLine":33,"endColumn":33},{"ruleId":"126","severity":1,"message":"140","line":2,"column":26,"nodeType":"124","messageId":"125","endLine":2,"endColumn":35},{"ruleId":"141","severity":1,"message":"142","line":18,"column":40,"nodeType":"143","messageId":"144","endLine":18,"endColumn":42},{"ruleId":"141","severity":1,"message":"142","line":18,"column":65,"nodeType":"143","messageId":"144","endLine":18,"endColumn":67},{"ruleId":"145","severity":1,"message":"146","line":33,"column":29,"nodeType":"147","messageId":"148","endLine":33,"endColumn":31},{"ruleId":"126","severity":1,"message":"140","line":1,"column":27,"nodeType":"124","messageId":"125","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"149","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":16},{"ruleId":"126","severity":1,"message":"150","line":3,"column":18,"nodeType":"124","messageId":"125","endLine":3,"endColumn":29},{"ruleId":"126","severity":1,"message":"151","line":3,"column":31,"nodeType":"124","messageId":"125","endLine":3,"endColumn":44},{"ruleId":"126","severity":1,"message":"152","line":3,"column":46,"nodeType":"124","messageId":"125","endLine":3,"endColumn":63},{"ruleId":"126","severity":1,"message":"134","line":9,"column":12,"nodeType":"124","messageId":"125","endLine":9,"endColumn":17},{"ruleId":"126","severity":1,"message":"153","line":9,"column":19,"nodeType":"124","messageId":"125","endLine":9,"endColumn":27},{"ruleId":"126","severity":1,"message":"154","line":10,"column":12,"nodeType":"124","messageId":"125","endLine":10,"endColumn":26},{"ruleId":"126","severity":1,"message":"155","line":10,"column":28,"nodeType":"124","messageId":"125","endLine":10,"endColumn":45},{"ruleId":"126","severity":1,"message":"156","line":12,"column":11,"nodeType":"124","messageId":"125","endLine":12,"endColumn":20},{"ruleId":"126","severity":1,"message":"157","line":14,"column":12,"nodeType":"124","messageId":"125","endLine":14,"endColumn":22},{"ruleId":"126","severity":1,"message":"158","line":14,"column":24,"nodeType":"124","messageId":"125","endLine":14,"endColumn":37},{"ruleId":"126","severity":1,"message":"159","line":8,"column":12,"nodeType":"124","messageId":"125","endLine":8,"endColumn":16},{"ruleId":"126","severity":1,"message":"160","line":1,"column":78,"nodeType":"124","messageId":"125","endLine":1,"endColumn":91},{"ruleId":"126","severity":1,"message":"161","line":1,"column":93,"nodeType":"124","messageId":"125","endLine":1,"endColumn":105},{"ruleId":"126","severity":1,"message":"162","line":5,"column":40,"nodeType":"124","messageId":"125","endLine":5,"endColumn":56},{"ruleId":"126","severity":1,"message":"163","line":5,"column":58,"nodeType":"124","messageId":"125","endLine":5,"endColumn":66},{"ruleId":"126","severity":1,"message":"134","line":11,"column":12,"nodeType":"124","messageId":"125","endLine":11,"endColumn":17},{"ruleId":"126","severity":1,"message":"164","line":7,"column":8,"nodeType":"124","messageId":"125","endLine":7,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":17,"column":8,"nodeType":"137","endLine":17,"endColumn":10,"suggestions":"165"},{"ruleId":"126","severity":1,"message":"139","line":24,"column":23,"nodeType":"124","messageId":"125","endLine":24,"endColumn":33},{"ruleId":"126","severity":1,"message":"166","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"126","severity":1,"message":"167","line":1,"column":16,"nodeType":"124","messageId":"125","endLine":1,"endColumn":27},{"ruleId":"126","severity":1,"message":"134","line":9,"column":12,"nodeType":"124","messageId":"125","endLine":9,"endColumn":17},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-unused-vars","'App' is defined but never used.","'loadFile' is assigned a value but never used.","'setLoad' is assigned a value but never used.","'createBunker' is assigned a value but never used.","'editBunker' is assigned a value but never used.","'file' is assigned a value but never used.","'isValid' is assigned a value but never used.","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'BunkerLoadFromLocal'. Either include it or remove the dependency array.","ArrayExpression",["168"],"'bunkerName' is assigned a value but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'dispatch' is assigned a value but never used.","'openBunkerList' is assigned a value but never used.","'setOpenBunkerList' is assigned a value but never used.","'getBunker' is assigned a value but never used.","'bunkerList' is assigned a value but never used.","'setBunkerList' is assigned a value but never used.","'open' is assigned a value but never used.","'DialogActions' is defined but never used.","'ListItemText' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'GameSettings' is defined but never used.",["169"],"'React' is defined but never used.","'userReducer' is defined but never used.",{"desc":"170","fix":"171"},{"desc":"170","fix":"172"},"Update the dependencies array to be: [BunkerLoadFromLocal]",{"range":"173","text":"174"},{"range":"175","text":"174"},[1107,1109],"[BunkerLoadFromLocal]",[529,531]]