{"ast":null,"code":"const TestBunkerLogic = props => {\n  const bunkerName = props.bunkerName;\n  const bunkerRooms = props.bunkerRooms;\n  const bunkerItems = props.bunkerItems;\n  const dispa = {\n    type: TYPE,\n    severity: SEVERITY,\n    message: MESSAGE\n  };\n  console.log(\"Trying to test bunker in TestBunkerLogic.js\");\n  if (bunkerName === \"\") {\n    ({\n      type: \"OPEN\",\n      severity: \"error\",\n      message: \"Bunker name cannot be empty\"\n    });\n  }\n  if (bunkerRooms.length < 2) {\n    ({\n      type: \"OPEN\",\n      severity: \"error\",\n      message: \"Bunker must have at least 2 rooms\"\n    });\n  }\n  if (bunkerItems.length < 1) {\n    ({\n      type: \"OPEN\",\n      severity: \"error\",\n      message: \"Bunker must have at least 1 item\"\n    });\n  }\n  for (let i = 0; i < bunkerRooms.length; i++) {\n    if (bunkerRooms[i].north === bunkerRooms[i].name || bunkerRooms[i].south === bunkerRooms[i].name || bunkerRooms[i].east === bunkerRooms[i].name || bunkerRooms[i].west === bunkerRooms[i].name) {\n      ({\n        type: \"OPEN\",\n        severity: \"error\",\n        message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to itself\"\n      });\n    }\n  }\n  console.log(\"Testing rooms\");\n  for (let i = 0; i < bunkerRooms.length; i++) {\n    console.log(\"Testing room \" + bunkerRooms[i].name);\n    if (bunkerRooms[i].north !== \"\") {\n      let roomNorthFound = false;\n      console.log(\"Testing north in room \" + bunkerRooms[i].name);\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].north === bunkerRooms[x].name) {\n          roomNorthFound = true;\n        }\n      }\n      if (!roomNorthFound) {\n        ({\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        });\n      }\n    }\n    if (bunkerRooms[i].south !== \"\") {\n      let roomSouthFound = false;\n      console.log(\"Testing south in room \" + bunkerRooms[i].name);\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].south === bunkerRooms[x].name) {\n          roomSouthFound = true;\n        }\n      }\n      if (!roomSouthFound) {\n        ({\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        });\n      }\n    }\n    console.log(\"Testing east in room \" + bunkerRooms[i].name);\n    if (bunkerRooms[i].east !== \"\") {\n      let roomEastFound = false;\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].east === bunkerRooms[x].name) {\n          roomEastFound = true;\n        }\n      }\n      if (!roomEastFound) {\n        ({\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        });\n      }\n    }\n    console.log(\"Testing west in room \" + bunkerRooms[i].name);\n    if (bunkerRooms[i].west !== \"\") {\n      let roomWestFound = false;\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].west === bunkerRooms[x].name) {\n          roomWestFound = true;\n        }\n      }\n      if (!roomWestFound) {\n        ({\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        });\n      }\n    }\n  }\n  console.log(\"Testing items\");\n  for (let i = 0; i < bunkerItems.length; i++) {\n    let itemFound = false;\n    for (let i = 0; i < bunkerRooms.length; i++) {\n      if (bunkerRooms[i].item !== \"\") {\n        if (bunkerRooms[i].item === bunkerItems[i].name) {\n          console.log(\"Item \" + bunkerItems[i].name + \" is in room \" + bunkerRooms[i].name);\n          itemFound = true;\n        }\n      }\n    }\n    if (!itemFound) {\n      ({\n        type: \"OPEN\",\n        severity: \"warning\",\n        message: \"Item \" + bunkerItems[i].name + \" is not in any room\"\n      });\n    }\n  }\n};\n_c = TestBunkerLogic;\nexport default TestBunkerLogic;\nvar _c;\n$RefreshReg$(_c, \"TestBunkerLogic\");","map":{"version":3,"names":["TestBunkerLogic","props","bunkerName","bunkerRooms","bunkerItems","dispa","type","TYPE","severity","SEVERITY","message","MESSAGE","console","log","length","i","north","name","south","east","west","roomNorthFound","x","roomSouthFound","roomEastFound","roomWestFound","itemFound","item"],"sources":["F:/New folder/bunker-project/src/TestBunkerLogic.jsx"],"sourcesContent":["\r\nconst TestBunkerLogic = (props) => {\r\n    const bunkerName = props.bunkerName;\r\n    const bunkerRooms = props.bunkerRooms;\r\n    const bunkerItems = props.bunkerItems;\r\n\r\n    const dispa = {\r\n        type: TYPE,\r\n        severity: SEVERITY,\r\n        message: MESSAGE\r\n    }\r\n\r\n    console.log(\"Trying to test bunker in TestBunkerLogic.js\")\r\n    if (bunkerName === \"\") {\r\n\r\n        ({ type: \"OPEN\", severity: \"error\", message: \"Bunker name cannot be empty\" });\r\n    }\r\n    if (bunkerRooms.length < 2) {\r\n        ({ type: \"OPEN\", severity: \"error\", message: \"Bunker must have at least 2 rooms\" });\r\n    }\r\n    if (bunkerItems.length < 1) {\r\n        ({ type: \"OPEN\", severity: \"error\", message: \"Bunker must have at least 1 item\" });\r\n    }\r\n    for (let i = 0; i < bunkerRooms.length; i++) {\r\n        if (bunkerRooms[i].north === bunkerRooms[i].name || bunkerRooms[i].south === bunkerRooms[i].name || bunkerRooms[i].east === bunkerRooms[i].name || bunkerRooms[i].west === bunkerRooms[i].name) {\r\n            ({ type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to itself\" });\r\n        }\r\n    }\r\n    console.log(\"Testing rooms\")\r\n    for (let i = 0; i < bunkerRooms.length; i++) {\r\n        console.log(\"Testing room \" + bunkerRooms[i].name)\r\n        if (bunkerRooms[i].north !== \"\") {\r\n            let roomNorthFound = false;\r\n            console.log(\"Testing north in room \" + bunkerRooms[i].name)\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].north === bunkerRooms[x].name) {\r\n                    roomNorthFound = true;\r\n                }\r\n            }\r\n            if (!roomNorthFound) {\r\n                ({ type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" });\r\n            }\r\n        }\r\n\r\n        if (bunkerRooms[i].south !== \"\") {\r\n            let roomSouthFound = false;\r\n            console.log(\"Testing south in room \" + bunkerRooms[i].name)\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].south === bunkerRooms[x].name) {\r\n                    roomSouthFound = true;\r\n                }\r\n            }\r\n            if (!roomSouthFound) {\r\n                ({ type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" });\r\n            }\r\n        }\r\n        console.log(\"Testing east in room \" + bunkerRooms[i].name)\r\n        if (bunkerRooms[i].east !== \"\") {\r\n            let roomEastFound = false;\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].east === bunkerRooms[x].name) {\r\n                    roomEastFound = true;\r\n                }\r\n            }\r\n            if (!roomEastFound) {\r\n                ({ type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" });\r\n            }\r\n        }\r\n        console.log(\"Testing west in room \" + bunkerRooms[i].name)\r\n        if (bunkerRooms[i].west !== \"\") {\r\n            let roomWestFound = false;\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].west === bunkerRooms[x].name) {\r\n                    roomWestFound = true;\r\n                }\r\n            }\r\n            if (!roomWestFound) {\r\n                ({ type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    console.log(\"Testing items\")\r\n    for (let i = 0; i < bunkerItems.length; i++) {\r\n        let itemFound = false;\r\n        for (let i = 0; i < bunkerRooms.length; i++) {\r\n            if (bunkerRooms[i].item !== \"\") {\r\n                if (bunkerRooms[i].item === bunkerItems[i].name) {\r\n                    console.log(\"Item \" + bunkerItems[i].name + \" is in room \" + bunkerRooms[i].name)\r\n                    itemFound = true;\r\n                }\r\n            }\r\n        }\r\n        if (!itemFound) {\r\n            ({ type: \"OPEN\", severity: \"warning\", message: \"Item \" + bunkerItems[i].name + \" is not in any room\" });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TestBunkerLogic;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}