{"ast":null,"code":"const TestBunkerLogic = props => {\n  const bunkerName = props.name;\n  const bunkerRooms = props.rooms;\n  const bunkerItems = props.bunkerItems;\n  console.log(\"Trying to test bunker in TestBunkerLogic.js\");\n  if (bunkerName === \"\") {\n    return {\n      type: \"OPEN\",\n      severity: \"error\",\n      message: \"Bunker name cannot be empty\"\n    };\n  }\n  if (bunkerRooms.length < 2) {\n    return {\n      type: \"OPEN\",\n      severity: \"error\",\n      message: \"Bunker must have at least 2 rooms\"\n    };\n  }\n  if (bunkerItems.length < 1) {\n    return {\n      type: \"OPEN\",\n      severity: \"error\",\n      message: \"Bunker must have at least 1 item\"\n    };\n  }\n  for (let i = 0; i < bunkerRooms.length; i++) {\n    if (bunkerRooms[i].north === bunkerRooms[i].name || bunkerRooms[i].south === bunkerRooms[i].name || bunkerRooms[i].east === bunkerRooms[i].name || bunkerRooms[i].west === bunkerRooms[i].name) {\n      return {\n        type: \"OPEN\",\n        severity: \"error\",\n        message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to itself\"\n      };\n    }\n  }\n  console.log(\"Testing rooms\");\n  for (let i = 0; i < bunkerRooms.length; i++) {\n    console.log(\"Testing room \" + bunkerRooms[i].name);\n    if (bunkerRooms[i].north !== \"\") {\n      let roomNorthFound = false;\n      console.log(\"Testing north in room \" + bunkerRooms[i].name);\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].north === bunkerRooms[x].name) {\n          roomNorthFound = true;\n        }\n      }\n      if (!roomNorthFound) {\n        return {\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        };\n      }\n    }\n    if (bunkerRooms[i].south !== \"\") {\n      let roomSouthFound = false;\n      console.log(\"Testing south in room \" + bunkerRooms[i].name);\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].south === bunkerRooms[x].name) {\n          roomSouthFound = true;\n        }\n      }\n      if (!roomSouthFound) {\n        return {\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        };\n      }\n    }\n    console.log(\"Testing east in room \" + bunkerRooms[i].name);\n    if (bunkerRooms[i].east !== \"\") {\n      let roomEastFound = false;\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].east === bunkerRooms[x].name) {\n          roomEastFound = true;\n        }\n      }\n      if (!roomEastFound) {\n        return {\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        };\n      }\n    }\n    console.log(\"Testing west in room \" + bunkerRooms[i].name);\n    if (bunkerRooms[i].west !== \"\") {\n      let roomWestFound = false;\n      for (let x = 0; x < bunkerRooms.length; x++) {\n        if (bunkerRooms[i].west === bunkerRooms[x].name) {\n          roomWestFound = true;\n        }\n      }\n      if (!roomWestFound) {\n        return {\n          type: \"OPEN\",\n          severity: \"error\",\n          message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\"\n        };\n      }\n    }\n  }\n  console.log(\"Testing items\");\n  for (let i = 0; i < bunkerItems.length; i++) {\n    let itemFound = false;\n    for (let i = 0; i < bunkerRooms.length; i++) {\n      if (bunkerRooms[i].item !== \"\") {\n        if (bunkerRooms[i].item === bunkerItems[i].name) {\n          console.log(\"Item \" + bunkerItems[i].name + \" is in room \" + bunkerRooms[i].name);\n          itemFound = true;\n        }\n      }\n    }\n    if (!itemFound) {\n      return {\n        type: \"OPEN\",\n        severity: \"warning\",\n        message: \"Item \" + bunkerItems[i].name + \" is not in any room\"\n      };\n    }\n  }\n};\n_c = TestBunkerLogic;\nexport default TestBunkerLogic;\nvar _c;\n$RefreshReg$(_c, \"TestBunkerLogic\");","map":{"version":3,"names":["TestBunkerLogic","props","bunkerName","name","bunkerRooms","rooms","bunkerItems","console","log","type","severity","message","length","i","north","south","east","west","roomNorthFound","x","roomSouthFound","roomEastFound","roomWestFound","itemFound","item"],"sources":["F:/New folder/bunker-project/src/TestBunkerLogic.jsx"],"sourcesContent":["\r\n\r\n\r\nconst TestBunkerLogic = (props) => {\r\n    const bunkerName = props.name;\r\n    const bunkerRooms = props.rooms;\r\n    const bunkerItems = props.bunkerItems;\r\n\r\n    console.log(\"Trying to test bunker in TestBunkerLogic.js\")\r\n    if (bunkerName === \"\") {\r\n        return { type: \"OPEN\", severity: \"error\", message: \"Bunker name cannot be empty\" };\r\n    }\r\n    if (bunkerRooms.length < 2) {\r\n        return { type: \"OPEN\", severity: \"error\", message: \"Bunker must have at least 2 rooms\" };\r\n    }\r\n    if (bunkerItems.length < 1) {\r\n        return { type: \"OPEN\", severity: \"error\", message: \"Bunker must have at least 1 item\" };\r\n    }\r\n    for (let i = 0; i < bunkerRooms.length; i++) {\r\n        if (bunkerRooms[i].north === bunkerRooms[i].name || bunkerRooms[i].south === bunkerRooms[i].name || bunkerRooms[i].east === bunkerRooms[i].name || bunkerRooms[i].west === bunkerRooms[i].name) {\r\n            return { type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to itself\" };\r\n        }\r\n    }\r\n    console.log(\"Testing rooms\")\r\n    for (let i = 0; i < bunkerRooms.length; i++) {\r\n        console.log(\"Testing room \" + bunkerRooms[i].name)\r\n        if (bunkerRooms[i].north !== \"\") {\r\n            let roomNorthFound = false;\r\n            console.log(\"Testing north in room \" + bunkerRooms[i].name)\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].north === bunkerRooms[x].name) {\r\n                    roomNorthFound = true;\r\n                }\r\n            }\r\n            if (!roomNorthFound) {\r\n                return { type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" };\r\n            }\r\n        }\r\n\r\n        if (bunkerRooms[i].south !== \"\") {\r\n            let roomSouthFound = false;\r\n            console.log(\"Testing south in room \" + bunkerRooms[i].name)\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].south === bunkerRooms[x].name) {\r\n                    roomSouthFound = true;\r\n                }\r\n            }\r\n            if (!roomSouthFound) {\r\n                return { type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" };\r\n            }\r\n        }\r\n        console.log(\"Testing east in room \" + bunkerRooms[i].name)\r\n        if (bunkerRooms[i].east !== \"\") {\r\n            let roomEastFound = false;\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].east === bunkerRooms[x].name) {\r\n                    roomEastFound = true;\r\n                }\r\n            }\r\n            if (!roomEastFound) {\r\n                return { type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" };\r\n            }\r\n        }\r\n        console.log(\"Testing west in room \" + bunkerRooms[i].name)\r\n        if (bunkerRooms[i].west !== \"\") {\r\n            let roomWestFound = false;\r\n            for (let x = 0; x < bunkerRooms.length; x++) {\r\n                if (bunkerRooms[i].west === bunkerRooms[x].name) {\r\n                    roomWestFound = true;\r\n                }\r\n            }\r\n            if (!roomWestFound) {\r\n                return { type: \"OPEN\", severity: \"error\", message: \"Bunker room \" + bunkerRooms[i].name + \" has an exit to a room that does not exist\" };\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    console.log(\"Testing items\")\r\n    for (let i = 0; i < bunkerItems.length; i++) {\r\n        let itemFound = false;\r\n        for (let i = 0; i < bunkerRooms.length; i++) {\r\n            if (bunkerRooms[i].item !== \"\") {\r\n                if (bunkerRooms[i].item === bunkerItems[i].name) {\r\n                    console.log(\"Item \" + bunkerItems[i].name + \" is in room \" + bunkerRooms[i].name)\r\n                    itemFound = true;\r\n                }\r\n            }\r\n        }\r\n        if (!itemFound) {\r\n            return { type: \"OPEN\", severity: \"warning\", message: \"Item \" + bunkerItems[i].name + \" is not in any room\" };\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TestBunkerLogic;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}